service: CrossAccountAccess
frameworkVersion: '3'

plugins:
  - serverless-dotenv-plugin #https://www.serverless.com/plugins/serverless-dotenv-plugin
  - serverless-offline #https://www.serverless.com/plugins/serverless-offline

custom:
  prune:
    automatic: true # Automatically remove old deployments
    includeLayers: true # Include AWS Lambda layers in pruning
    number: 2 # Number of versions to keep
  dotenv:
    path: '../.env'
    exclude:
      - CONSUMER_AWS_ACCOUNT

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  timeout: 29 # Maximum execution time for lambda function in seconds

  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'lambda:InvokeFunction'
        - 'lambda:InvokeAsync'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - 'ec2:*'
      Resource:
        - '*'
    - Effect: 'Allow'
      Action:
        - 'states:StartExecution'
      Resource:
        - '*'
    - Effect: 'Allow'
      Action:
        - 'es:ESHttpGet'
      Resource:
        - '*'

useDotenv: true
functions:
  CrossAccountFunction: 
    handler: lambda_code.handler
    events:
      - httpApi:
          method: 'GET'
          path: /test
    role: lambdaExecutionRole
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /my/default/path/
        # RoleName: lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CloudWatchLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                   Resource:
                     Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"
         # Define a custom IAM policy named "LambdaSTSAssume"
          - PolicyName: LambdaSTSAssume
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  # Allow all actions within AWS Security Token Service (STS)
                  # This grants the Lambda function permissions related to temporary security credentials and federated users.
                  Action:
                    - sts:*
                  Resource: "*"
                  # Apply the permissions to all resources within the AWS account
# Explanation:
# The "LambdaSTSAssume" policy grants the Lambda function broad permissions within AWS Security Token Service (STS).
# This includes actions related to temporary security credentials and federated users.
